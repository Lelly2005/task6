name: Demo CRM CI/CD to Killercoda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: demo-crm
  REGISTRY: ghcr.io

jobs:
  deploy-to-killercoda:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: generate-tag
      run: |
        TAG="build-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"

    - name: Set lowercase repository owner
      id: owner
      run: |
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "owner=${OWNER_LOWER}" >> $GITHUB_OUTPUT

    - name: Log in to GitHub Container Registry (GHCR)
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull, retag and push Demo CRM image to GHCR
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        OWNER="${{ steps.owner.outputs.owner }}"
        IMAGE="${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}:${TAG}"
        IMAGE_LATEST="${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}:latest"

        echo "Pulling original image..."
        docker pull pwstaging/demo-crm:latest

        echo "Retagging image for GHCR..."
        docker tag pwstaging/demo-crm:latest $IMAGE
        docker tag pwstaging/demo-crm:latest $IMAGE_LATEST

        echo "Pushing images to GHCR..."
        docker push $IMAGE
        docker push $IMAGE_LATEST

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for Killercoda
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify Killercoda connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Prepare deployment manifest
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        OWNER="${{ steps.owner.outputs.owner }}"
        IMAGE="${{ env.REGISTRY }}/${OWNER}/${{ env.IMAGE_NAME }}:${TAG}"

        sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/deployment.yaml
        cat k8s/deployment.yaml

    - name: Deploy Demo CRM Application
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl wait --for=condition=available deployment/demo-crm --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get all
        kubectl get pods -l app=demo-crm

        kubectl port-forward deployment/demo-crm 3000:3000 &
        PORT_FORWARD_PID=$!
        sleep 15

        if curl -f http://localhost:3000/; then
          echo "Application is responding correctly"
        else
          echo "Application test failed"
          kubectl logs -l app=demo-crm --tail=20
          exit 1
        fi

        kill $PORT_FORWARD_PID

    - name: Display access information
      run: |
        echo "Demo CRM is running!"
        echo "kubectl get pods,deployments -l app=demo-crm"
